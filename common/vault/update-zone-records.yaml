apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-service-account
  namespace: istio-system
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: istio-system
  name: service-reader
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
rules:
- apiGroups: [""]  # "" indicates the core API group (services are part of this group)
  resources: ["services"]
  verbs: ["get", "list"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: service-reader-binding
  namespace: istio-system
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
subjects:
- kind: ServiceAccount
  name: istio-service-account 
  namespace: istio-system
roleRef:
  kind: Role
  name: service-reader 
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: batch/v1
kind: Job
metadata:
  generateName: update-zone-record
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      serviceAccountName: istio-service-account
      containers:
      - name: kubectl
        image: ghcr.io/oci-sunbird/ociop:latest
        command: ["ansible-playbook"]
        args: ["/root/.oci/playbooks/update_zone_record_playbook.yaml", "-i", "/root/.oci/inventory/inventory"]
        env:
        - name: OCI_CLI_AUTH
          valueFrom:
            secretKeyRef:
              name: ansible-oci
              key: oci_cli_auth
        volumeMounts:
        - name: inventory-volume
          mountPath: /root/.oci/inventory
        - name: playbooks-volume
          mountPath: /root/.oci/playbooks
      restartPolicy: Never
      volumes:
      - name: inventory-volume
        configMap:
          name: ansible-conf
      - name: playbooks-volume
        configMap:
          name: ansible-playbooks